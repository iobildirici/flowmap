# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FlowMapDialog
                                 A QGIS plugin
 flow map
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-12-25
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Caner Güzeler
        email                : canerguzeler@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from time import sleep

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import *
from qgis.gui import *
from qgis.utils import iface
from PyQt5.QtCore import QVariant
from qgis.PyQt.QtGui import QColor

def scale_between(unslaced_num, min_allowed, max_allowed, min, max):
    return (max_allowed - min_allowed) * (unslaced_num - min) / ((max - min) + min_allowed)


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'flow_map_dialog_base.ui'))
document_dir = os.path.expanduser('~/Documents')


class FlowMapDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(FlowMapDialog, self).__init__(parent)

        # ekrandaki ok ve cancel butonlarının refanslarının tutulduğu değişken
        self.buttonBox = None
        self.setupUi(self)
        self.clicked = False

        # bu alanda node dosyası seçildikten sonra kaydettiğimiz layer'ın adı tutulacak.
        # bu layer adı kullanılarak input ve output verileri o layer'a eklenecek
        self.new_node_layer_name = None

        # select file with the node coordinates butonunun refaransının tutulduğu değişken
        self.dugum_button = None
        # choose the file has the data to generate flow map butonunun refaransının tutulduğu değişken
        self.flow_button = None
        # the path to save the new output file butonunun refaransının tutulduğu değişken
        self.save_button = None
        # select file with the node coordinates ile seçilen dosya yolunun tutulduğu değişken
        self.dugum_text = None
        # choose the file has the data to generate flow map ile seçilen dosya yolunun tutulduğu değişken
        self.flow_text = None

        #  from ve to select boxlarında seçilen değerin tutulduğu değişken
        self.from_field = None
        self.to_field = None
        # from ve to alanlarının isimlerini tutar
        # note: üstteki değerler sadece indextiler
        self.from_field_name = None
        self.to_field_name = None


        # key field select box'unda seçilen değerin tutulduğu değişken
        self.key_field = None
        self.key_field_name = None


        # düğüm noktalarının ve flow verisinin olduğu layer adlarının tutulduğu değişken 
        self.node_layer_name = None
        self.flow_layer_name = None

        # choose the field to match data selectbox seçilen değerin tutulduğu değişken
        self.name_field = None
        self.name_field_value = None

        # seçilen dosyaların başlık ve satır bilgileri tutuluyor
        # "dugum" = select file with the node coordinates
        # "flow" = choose the file has the data to generate flow map,
        self.contents = {
            "dugum": [],
            "flow": []
        }

      

        self.layer_name = None
        self.setLayerNameComboboxes()
        self.connectComboBoxes()
        self.connectFileName()
        self.connect_node_layer()

    def setLayerNameComboboxes(self):
        node_layers_combobox = self.findChild(QtWidgets.QComboBox, 'nodeLayers')
        flow_layers_combobox = self.findChild(QtWidgets.QComboBox, 'flowLayers')
        #projede tüm layer adlarını alıyoruz

        #print(QgsProject.instance().nonIdentifiableLayers())
        #iob 13.03.25 düzeltme
        #all_layer_names = [layer.name() for layer in QgsProject.instance().mapLayers().values() if layer.type()==0] 
        all_layer_names=[]
        for layer in QgsProject.instance().mapLayers().values():
            if layer.type()==1:    #raster layerlar 1 onları elemek için vektör ve geometrisi olmayanlar 0
                continue
            if layer.wkbType()==1 or layer.wkbType()==100:
                all_layer_names.append(layer.name())
        #iob 13.03.2025 son

        self.setColumnsFor('nodeLayers', all_layer_names)
        self.setColumnsFor('flowLayers', all_layer_names)



        def saveNodeLayers(layer_name):
            self.node_layer_name = layer_name
            [columns, contents, points] = self.readLayerByName(layer_name)
            self.contents["dugum"] = [
                columns,
                contents,
                points
            ]
            self.setColumnsFor('nameField', columns)

        def saveFlowLayers(layer_name):
            self.flow_layer_name = layer_name
            [columns, contents, points] = self.readLayerByName(layer_name)
            self.contents["flow"] = [
                columns,
                contents#,
                #points      #iob 16.03.2025
            ]
            self.setColumnsFor('from_field', columns)
            self.setColumnsFor('to_field', columns)
            self.setColumnsFor('comboBox_2', columns)

            

        node_layers_combobox.currentTextChanged.connect(saveNodeLayers)
        flow_layers_combobox.currentTextChanged.connect(saveFlowLayers)

    def connect_node_layer(self):
        self.new_node_layer_name = self.findChild(QtWidgets.QLineEdit, 'new_node_layer_name')
        self.new_node_layer_name.setText("density")


    def connectFileName(self):
        """
            bu fonksiyonda kaydedilecek dosya adını girdiğimiz text field'i bulup eşleştiriyoruz
        """
        self.layer_name = self.findChild(QtWidgets.QLineEdit, 'layer_name')
        self.layer_name.setText("flow")

    def drive_line(self, from_point, to_point):
        line = QgsFeature()
        line.setGeometry(QgsGeometry.fromPolyline([QgsPoint(from_point), QgsPoint(to_point)]))
        return line

    def makeButtonClikable(self):
        self.clicked = False

    def save_input_and_outputs_to_node_layers(self, ids, inputs, outputs):
##        print("ids")
##        print(ids)
        """
         bu fonksiyon input ve output alanlarını düğüm noktalarının olduğu layer'a ekler
         bunu yapmak içinde önce layer adı ile layerları bulur ve tüm satırlarını dolaşarak her bir satıra
         bu değerleri eşleştirerek kaydeder
        """
        if self.new_node_layer_name is None:
            return

        layer = QgsVectorLayer('Point', 'connecting line',
                               "memory")
        layer.setName(self.new_node_layer_name.text())
        pr = layer.dataProvider()
        pr.addAttributes(
            [
                QgsField(self.name_field_value, QVariant.Int),
                QgsField('input', QVariant.Int),
                QgsField('output', QVariant.Int)
            ]
        )
        layer.updateFields()
        features = []
        for id in ids:
            feature = QgsFeature()
            data = {
                self.name_field_value: id,
                "input": inputs[id] if  id in inputs else 0,
                "output": outputs[id] if id in outputs else 0
            }
            feature.setAttributes(list(data.values()))
##            print(id, ids[id])
            feature.setGeometry(QgsGeometry.fromPointXY(ids[id]))
            features.append(feature)
        layer.updateExtents()
        pr.addFeatures(features)
        layer.commitChanges()
        self.save_layer_with_name(self.new_node_layer_name.text(), layer)



    def find_point_from_node_layer_by_name(self, id):
        """
        bu fonksiyon verilen id değeri ile düğüm noktasından eşleşen satırı bulup o satırın nokta değerini alır ve döndürür
        """
        layers = QgsProject.instance().mapLayersByName(self.node_layer_name)

        if len(layers) == 0:
            return
        layer = layers[0]

        features = layer.getFeatures()

        for feature in features:
            attributes = feature.attributes()
            field_to_match = self.name_field

            if attributes[field_to_match] == id:
                return feature.geometry().asPoint()


    def save_layer_with_name(self, layer_name, layer):
        """
            Bu fonksiyon içerinde ilk olarak daha önceden bu isimde bir layer kaydettik mi diye bakacağız
            eğer kaydettiysek o layer'i silip daha sonra bunu ekleyeceğiz
        """
        layers = QgsProject.instance().mapLayersByName(layer_name)
        for existing_layer in layers:
            QgsProject.instance().removeMapLayer(existing_layer.id())
        
        QgsProject.instance().addMapLayer(layer)

    def get_ids_and_points(self):
        [_, rows, points] = self.contents["dugum"]
        ids = {}

        for i, row in enumerate(rows):
            ids[row[self.name_field]] = points[i]

        return ids

    def accept(self):
        """
        Bu fonksiyon içerisinde düğüm noktaları arasındaki akışları çizdiriyoruz.
        """
##        print("called connect")
        if self.clicked is True:
            return
        self.clicked = True

        #print(self)
        """
            Bu kısımda init fonksiyonunda tanımladığımız, ekrandaki comboboxların değerlerini tutan değişkenlerin
            hepsinin değerlerinin olup olmadığını kontrol ediyoruz. 
            Eğer bir alana değer atanmadıysa hata mesajı veriyoruz.
        """
        check_fields = ['key_field', 'name_field', 'from_field', 'to_field']
        for field in check_fields:
            if getattr(self, field) is None:
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Critical)
                msg.setText("Error")
                msg.setInformativeText('Please select field for ' + field)
                msg.setWindowTitle("Error")
                msg.exec_()
                return

        contents = self.contents
        flow = contents["flow"]
        flow_rows = flow[1]

        point_layer = iface.mapCanvas().currentLayer()
        point_layer_dp = point_layer.dataProvider()  # we need this to extract the coordinate system
        source_crs = point_layer_dp.crs()
        layer = QgsVectorLayer('LineString', 'connecting line',
                               "memory")  # this will create an in memory layer which is not stored on a HDD
        layer.setCrs(source_crs)  # we set the CRS to the one provided by the point layer
        pr = layer.dataProvider()
        layer.startEditing()

        # layer inputuna girilen layer adını alıyoruz
        # ve bu adı kaydediyoruz
        layer_name = self.layer_name.text()
        layer.setName(layer_name)

        pr.addAttributes(
            [
                QgsField(self.from_field_name, QVariant.Int),
                QgsField(self.to_field_name, QVariant.Int),
                QgsField(self.key_field_name, QVariant.Int)
            ]
        )
        layer.updateFields()
        # inputs değişkeni bir noktaya giren noktaları sayacak
        nodeInputs = {}

        # nodeOutputs değişkeni bir noktadan (from) çıkan verileri sayacak
        nodeOutputs = {}

        lines = []
        ids = self.get_ids_and_points()

        """
          choose the file has the data to generate flow map butonuyla seçilen shape dosyasındaki her bir satır için bir
          çizgi oluşturacağımız için bu satırları döngüye sokuyoruz.
        """
        for flow_row in flow_rows:
            from_ = flow_row[self.from_field]
            to_ = flow_row[self.to_field]

            # eğer bu noktaya daha önce çıktılar arasında denk gelmediysek
            # 0 değerini vererek oluşturuyoruz
            if from_ not in nodeOutputs:
                nodeOutputs[from_] = 0

            nodeOutputs[from_] = nodeOutputs[from_] + 1

            # eğer bu noktaya daha önce çıktılar arasında denk gelmediysek
            # 0 değerini vererek oluşturuyoruz
            if to_ not in nodeInputs:
                nodeInputs[to_] = 0

            nodeInputs[to_] = nodeInputs[to_] + 1
            data = flow_row[self.key_field]

            from_point = self.find_point_from_node_layer_by_name(from_)
            to_point = self.find_point_from_node_layer_by_name(to_)

            # çizgiyi oluşturuyoruz
            line = self.drive_line(
                from_point,
                to_point
            )

            line.setAttributes([from_, to_, data])

            """
                oluşturduğumuz çizgiyi saklıoyruz
            """
            lines.append(line)

        """
           oluşturduğuz layer'a bu çizgiyi ekliyoruz
        """

        pr.addFeatures(lines)
        """
          layer renderer'i açarak çizgi kalınlığını ayarlıyoruz
        """
        renderer = layer.renderer()
        symbol = renderer.symbol()

        symbol.setColor(QColor.fromRgb(0, 0, 0))
        self.save_input_and_outputs_to_node_layers(ids,nodeInputs, nodeOutputs)
        symbol.setWidth(1)
        layer.updateExtents()
        layer.commitChanges()
        #print(layer.commitErrors())

        """
            haritaya bu layerı ekliyoruz
        """
        self.save_layer_with_name(layer_name, layer)
        sleep(0.1);
        self.clicked = False

    def connectOkButton(self):
        """
        Tamam butonuna tıklandığında çizgilerin oluşturulması için kullandığımız Accept fonksiyonuna bu butonu bağlar.
        """
        #print("called connect button")

        self.buttonBox = self.findChild(QtWidgets.QDialogButtonBox, 'buttonBox')
        self.buttonBox.accepted.connect(self.accept)

    def readLayerByName(self, layer_name):
        """
        Verilen layer_name parametresindeki layerı okuyup sütun adları ve satırları kaydeder.
        """
        layers = QgsProject.instance().mapLayersByName(layer_name)
        layer = layers[0]
        if not layer.isValid():
            print("layer is not valid")
        columns = []
        content = []
        points = []

        for field in layer.fields().toList():
            columns.append(field.name())
        for feature in layer.getFeatures():
            content.append(feature.attributes())
            if layer.wkbType()==1:                  #iob 16.03.2025
                geometry = feature.geometry()
                points.append(geometry.asPoint())

        return [columns, content, points]

    def setColumnsFor(self, id, columns):
        """
        verilen ID ile gerekli olan comboBox u bulup comboBox'un değerlerini atamamızı sağlıyor.
        """
        item = self.findChild(QtWidgets.QComboBox, id)
        if item is None:
            print('item not found for ' + id)
            return
        item.clear()
        item.addItems([
            #'Select',    #iob 13.03.25 düzeltme: Select seçilince katman olmadığı için hata geliyordu. 
            *columns
        ])




    def find_value_for_field(self, field, value):
        """
            comboboxChange fonksiyonuna gelen "value" =  sütün adı olduğu için
            bu değeri direkt olarak kullanmamız imkansız, o yüzden bu sütun adını alıp
            contents.dugum ve contents.flow içerisinde tuttuğumuz sütün adlarından o sutun'un
            bulunduğu index'i bulup döndürüyoruz.
        """
        if value == "Select" or value == "":
            return 0

        headers = self.contents["dugum"][0] if field in ["nameField"] else \
            self.contents["flow"][0]
        return headers.index(value)

    def comboboxChange(self, field):
        """
           connectComboBoxes ile comboboxlarda bir değişiklik yapıldığında bu fonksyionun çağrılması gerektiğini
           belirttik. Bu fonksiyon temel olarak bir paramtre alıyor ; "field" parametresi ile hangi alanda
           yapılan değişikliği dinleyeceğimizi belirtiyoruz.
           bu fonksiyon save_value adında bir fonksiyon döndürüyor geriye. Bu fonksiyonun içerisinde
           aldığımız field value'sini if else'lerle karşılaştırıp en üstte tanımladığımız alanlara yazdırıyoruz
        """
        self.clicked = False

        def save_value(value):
            if field == 'from_field':
                self.from_field_name = value
                self.from_field = self.find_value_for_field(field, value)
            elif field == 'comboBox_2':
                self.key_field = self.find_value_for_field(field, value)
                self.key_field_name  =value
            elif field == 'to_field':
                self.to_field = self.find_value_for_field(field, value)
                self.to_field_name = value

            elif field == 'nameField':
                self.name_field = self.find_value_for_field(field, value)
                self.name_field_value = value

        return save_value

    def connectComboBoxes(self):
        """
        ekranda görüken combobox-selectbox'larda bir değer değiştikten sonra
        bu değeri kaydetmek için çağrılmasını istediğimiz fonksiyonları tanımlıyoruz
        ilk olarak ekranda bulunan tüm comboboxların idlerini bir liste halinde alıp
        daha sonra her birinin refaranslarnı bulup currentTextChanged.connect ile bunları bağlıyoruz
        """
        fields = ['from_field', 'to_field', 'comboBox', 'nameField', 'comboBox_2']
        for field in fields:
            foundChild = self.findChild(QtWidgets.QComboBox, field)
            if foundChild is None:
                print(field + ' field could not found')
            else:
                foundChild.currentTextChanged.connect(self.comboboxChange(field))

